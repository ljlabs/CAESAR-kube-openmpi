image:
  repository: jordaan0/caesar-rest
  tag: version-0.0.9

networkPolicy:
  enabled: false

sshGateway:
  enabled: false
  nodePort: 30220

mpiMaster:
  autoUpdateHostfile:
    enabled: true
  nodeSelector: {}
  tolerations: []
  affinity: {}
  volumes:
    - name: nfs-neanias-mpi
      persistentVolumeClaim:
        claimName: nfs-neanias-mpi
  volumeMounts:
  - mountPath: /workspace
    name: nfs-neanias-mpi
  resources:
    limits:
      cpu: "4"
      memory: "1Gi"
    requests:
      cpu: "2"
      memory: "1Gi"

mpiWorkers:
  num: 1
  nodeSelector: {}
  tolerations: []
  affinity: {}
  volumes:
    - name: nfs-neanias-mpi
      persistentVolumeClaim:
        claimName: nfs-neanias-mpi
  volumeMounts:
  - mountPath: /workspace
    name: nfs-neanias-mpi
  resources:
    requests:
      cpu: "0.5"
  
redisMaster:
  spec:
    replicas: 1
    template:
      spec: 
        containers:
          image: k8s.gcr.io/redis:e2e 
          resources:
            requests:
              cpu: 100m
              memory: 100Mi

redisSlave:
  spec:
    replicas: 1
    template:
      spec: 
        containers:
          image: gcr.io/google_samples/gb-redisslave:v3
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          env:
            value: dns
            # Using `GET_HOSTS_FROM=dns` requires your cluster to
            # provide a dns service. As of Kubernetes 1.3, DNS is a built-in
            # service launched automatically. However, if the cluster you are using
            # does not have a built-in DNS service, you can instead
            # access an environment variable to find the master
            # service's host. To do so, comment out the 'value: dns' line above, and
            # uncomment the line below:
            # value: env

# PersistentVolumeClaim:
#   metadata:
#     name: scratch-claim
#   spec:
#     resources:
#         requests:
#             storage: 4Gi
#     storageClassName: hostpath
